{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","isFunction","html","append","compileReplace","replaceWith","$type","$class","addClass","$parse","$http","$templateCache","controller","$scope","$element","$attrs","$node_class","_enabledDragDrop","dragEnabled","dropEnabled","keyNode","treeDndNode","setScope","getElementChilds","querySelector","getData","getScopeNode","replace","$nodes_class","$injector","$timeout","$window","$document","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","indent","indent_plus","indent_unit","$tree_class","primary_key","colDefinitions","$globals","treeData","tree_nodes","copy","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","push","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","isArray","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","tElement","$_Template","_element","_fnInitDrag","ready","templateUrl","getPath","cache","success","data","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","prepend","_fnDragEnd","_isTable","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","clearme","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.4\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = function (val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    angular.isDefined = function (val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\n        '$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        }\n    ).directive(\n    'compile', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty()\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n)\n    .directive(\n    'compileReplace', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n).directive(\n    'treeDndNodeHandle', function () {\n        return {\n            restrict: 'A',\n            scope:    true,\n            link:     function (scope, element, attrs) {\n                scope.$type = 'TreeDnDNodeHandle';\n                if (scope.$class.handle) {\n                    element.addClass(scope.$class.handle);\n                }\n            }\n        };\n    }\n).directive(\n    'treeDndNode', [\n        '$parse', '$http', '$templateCache', '$compile', function ($parse, $http, $templateCache, $compile) {\n            return {\n                restrict:   'A',\n                controller: function ($scope, $element, $attrs) {\n                    $scope.$node_class = '';\n\n                    if ($scope.$class.node) {\n                        $element.addClass($scope.$class.node);\n                        $scope.$node_class = $scope.$class.node;\n                    }\n\n                    var _enabledDragDrop = (typeof $scope.dragEnabled === 'boolean' || typeof $scope.dropEnabled === 'boolean');\n\n                    var keyNode = $attrs.treeDndNode;\n\n                    if (_enabledDragDrop) {\n                        $scope.setScope($scope, $scope[keyNode]);\n                    }\n\n                    $scope.getElementChilds = function () {\n                        return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n                    };\n\n                    if (_enabledDragDrop) {\n\n                        $scope.$element = $element;\n                        $scope.$type = 'TreeDnDNode';\n\n                        $scope.getData = function () {\n                            return $scope[keyNode];\n                        };\n                    }\n\n                    $scope.getScopeNode = function () {\n                        return $scope;\n                    };\n                }\n            };\n        }]\n).directive(\n    'treeDndNodes', ['$parse',function ($parse) {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element, attrs) {\n                scope.$nodes_class = '';\n                scope.$type = 'TreeDnDNodes';\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                }\n            }\n        };\n    }]\n).directive(\n    'treeDnd', [\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\n            return {\n                restrict:   'E',\n                scope:      true,\n                replace:    true,\n                controller: [\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                        $scope.indent = 20;\n                        $scope.indent_plus = 15;\n                        $scope.indent_unit = 'px';\n                        $scope.$tree_class = 'table';\n                        $scope.primary_key = '__uid__';\n\n\n                        $scope.$type = 'TreeDnD';\n                        // $scope.enabledFilter = null;\n                        $scope.colDefinitions = [];\n                        $scope.$globals = {};\n                        $scope.$class = {};\n\n                        $scope.treeData = [];\n                        $scope.tree_nodes = [];\n\n\n                        $scope.$class = angular.copy($TreeDnDClass);\n                        angular.extend(\n                            $scope.$class.icon, {\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n                            }\n                        );\n\n                        $scope.for_all_descendants = function (node, fn) {\n                            if (angular.isFunction(fn)) {\n                                var _i, _len, _nodes;\n\n                                if (fn(node)) {\n                                    return false;\n                                }\n                                _nodes = node.__children__;\n                                _len = _nodes.length;\n                                for (_i = 0; _i < _len; _i++) {\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\n                                        return false;\n                                    }\n                                }\n                            }\n                            return true;\n                        };\n\n                        $scope.getLastDescendant = function (node) {\n                            var last_child, n;\n                            if (!node) {\n                                node = $scope.tree ? $scope.tree.selected_node : false;\n                            }\n                            if (node === false) {\n                                return false;\n                            }\n                            n = node.__children__.length;\n                            if (n === 0) {\n                                return node;\n                            } else {\n                                last_child = node.__children__[n - 1];\n                                return $scope.getLastDescendant(last_child);\n                            }\n                        };\n\n                        $scope.getElementChilds = function () {\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n                        };\n\n                        $scope.onClick = function (node) {\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                                // We want to detach from Angular's digest cycle so we can\n                                // independently measure the time for one cycle.\n                                setTimeout(\n                                    function () {\n                                        $scope.tree.on_click(node);\n                                    }, 0\n                                );\n                            }\n                        };\n\n                        $scope.onSelect = function (node) {\n                            if (angular.isDefined($scope.tree)) {\n                                if (node !== $scope.tree.selected_node) {\n                                    $scope.tree.select_node(node);\n                                }\n\n                                if (angular.isFunction($scope.tree.on_select)) {\n                                    setTimeout(\n                                        function () {\n                                            $scope.tree.on_select(node);\n                                        }, 0\n                                    );\n                                }\n                            }\n                        };\n\n                        var passedExpand, _clone;\n                        $scope.toggleExpand = function (node, fnCallback) {\n                            passedExpand = true;\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                                passedExpand = false;\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                                passedExpand = false;\n                            }\n\n                            if (passedExpand) {\n                                if (node.__children__.length > 0) {\n                                    node.__expanded__ = !node.__expanded__;\n                                }\n                            }\n                        };\n\n                        $scope.getHash = function (node) {\n                            if ($scope.primary_key === '__uid__') {\n                                return '#' + node.__parent__ + '#' + node.__uid__;\n                            } else {\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n                            }\n                        };\n\n                        $scope.$callbacks = {\n                            for_all_descendants: $scope.for_all_descendants,\n                            expand:              function (node) {\n                                return true;\n                            },\n                            accept:              function (dragInfo, moveTo, isChanged) {\n                                return $scope.dropEnabled === true;\n                            },\n                            calsIndent:          function (level, skipUnit, skipEdge) {\n                                var unit = 0,\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\n                                if (!skipUnit) {\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                                }\n\n                                if (level - 1 < 1) {\n                                    return edge + unit;\n                                } else {\n                                    return $scope.indent * (level - 1) + edge + unit;\n                                }\n                            },\n                            droppable:           function () {\n                                return $scope.dropEnabled === true;\n                            },\n                            draggable:           function () {\n                                return $scope.dragEnabled === true;\n                            },\n                            beforeDrop:          function (event) {\n                                return true;\n                            },\n                            changeKey:           function (node) {\n                                var _key = node.__uid__;\n                                node.__uid__ = Math.random();\n                                if (node.__selected__) {\n                                    delete(node.__selected__);\n                                }\n\n                                if ($scope.primary_key !== '__uid__') {\n                                    _key = '' + node[$scope.primary_key];\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                                    node[$scope.primary_key] = _key;\n                                }\n                                // delete(node.__hashKey__);\n                            },\n                            clone:               function (node, _this) {\n                                _clone = angular.copy(node);\n                                this.for_all_descendants(_clone, this.changeKey);\n                                return _clone;\n                            },\n                            remove:              function (node, parent, _this) {\n                                return parent.splice(node.__index__, 1)[0];\n                            },\n                            add:                 function (node, pos, parent, _this) {\n                                if (parent) {\n                                    if (parent.length > -1) {\n                                        if (pos > -1) {\n                                            parent.splice(pos, 0, node);\n                                        } else {\n                                            // todo If children need load crazy\n                                            parent.push(node);\n                                        }\n                                    } else {\n                                        parent.push(node);\n                                    }\n                                }\n                            }\n                        };\n\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\n                            $scope.placeElm = null;\n                            //                            $scope.dragBorder = 30;\n                            $scope.dragEnabled = null;\n                            $scope.dropEnabled = null;\n                            $scope.horizontal = null;\n\n                            if ($attrs.enableDrag) {\n\n                                $scope.dragDelay = 0;\n                                $scope.enabledMove = true;\n                                $scope.statusMove = true;\n                                $scope.enabledHotkey = false;\n                                $scope.enabledCollapse = null;\n                                $scope.statusElm = null;\n                                $scope.dragging = null;\n\n                                angular.extend(\n                                    $scope.$callbacks, {\n                                        beforeDrag: function (scopeDrag) {\n                                            return true;\n                                        },\n                                        dragStop:   function (event, skiped) {},\n                                        dropped:    function (info, pass, isMove) {\n                                            if (!info) {\n                                                return null;\n                                            }\n\n                                            if (!info.changed && isMove) {\n                                                return false;\n                                            }\n                                            var _node = info.node,\n                                                _nodeAdd = null,\n                                                _move = info.move,\n                                                _parent = null,\n                                                _parentRemove = (info.parent || info.drag.treeData),\n                                                _parentAdd = (_move.parent || info.target.treeData);\n\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                                if (isMove) {\n                                                    _parent = _parentRemove;\n                                                    if (angular.isDefined(_parent.__children__)) {\n                                                        _parent = _parent.__children__;\n                                                    }\n\n                                                    _nodeAdd = info.drag.$callbacks.remove(\n                                                        _node,\n                                                        _parent,\n                                                        info.drag.$callbacks\n                                                    );\n                                                } else {\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                                }\n\n                                                // if node dragging change index in sample node parent\n                                                // and index node decrement\n                                                if (isMove &&\n                                                    info.drag === info.target &&\n                                                    _parentRemove === _parentAdd &&\n                                                    _move.pos >= info.node.__index__) {\n                                                    _move.pos--;\n                                                }\n\n                                                _parent = _parentAdd;\n                                                if (_parent.__children__) {\n                                                    _parent = _parent.__children__;\n                                                }\n\n                                                info.target.$callbacks.add(\n                                                    _nodeAdd,\n                                                    _move.pos,\n                                                    _parent,\n                                                    info.drag.$callbacks\n                                                );\n\n                                                return true;\n                                            }\n\n                                            return false;\n                                        },\n                                        dragStart:  function (event) {},\n                                        dragMove:   function (event) {}\n                                    }\n                                );\n\n                                $scope.setDragging = function (dragInfo) {\n                                    $scope.dragging = dragInfo;\n                                };\n\n                                $scope.enableMove = function (val) {\n                                    if (typeof val === \"boolean\") {\n                                        $scope.enabledMove = val;\n                                    } else {\n                                        $scope.enabledMove = true;\n                                    }\n                                };\n\n                                if ($attrs.enableStatus) {\n                                    $scope.enabledStatus = false;\n\n                                    $scope.hideStatus = function () {\n                                        if ($scope.statusElm) {\n                                            $scope.statusElm.addClass($scope.$class.hidden);\n                                        }\n                                    };\n\n                                    $scope.refreshStatus = function () {\n                                        if (!$scope.dragging) {\n                                            return;\n                                        }\n\n                                        if ($scope.enabledStatus) {\n                                            var statusElmOld = $scope.statusElm;\n                                            if ($scope.enabledMove) {\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                                            } else {\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                                            }\n\n                                            if (statusElmOld !== $scope.statusElm) {\n                                                if (statusElmOld) {\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                                    statusElmOld.remove();\n                                                }\n                                                $document.find('body').append($scope.statusElm);\n\n                                            }\n\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\n                                        }\n                                    };\n\n                                    $scope.setPositionStatus = function (e) {\n                                        if ($scope.statusElm) {\n                                            $scope.statusElm.css(\n                                                {\n                                                    'left':    e.pageX + 10 + 'px',\n                                                    'top':     e.pageY + 15 + 'px',\n                                                    'z-index': 9999\n                                                }\n                                            );\n                                            $scope.statusElm.addClass($scope.$class.status);\n                                        }\n                                    };\n                                }\n                            }\n\n                            $scope.targeting = false;\n\n                            $scope.getPrevSibling = function (node) {\n                                if (node && node.__index__ > 0) {\n                                    var _parent, _index = node.__index__ - 1;\n\n                                    if (angular.isDefined(node.__parent_real__)) {\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\n                                        return _parent.__children__[_index];\n                                    }\n                                    return $scope.treeData[_index];\n\n                                }\n                                return null;\n                            };\n\n                            $scope.getNode = function (index) {\n                                if (angular.isUndefinedOrNull(index)) {\n                                    return null;\n                                }\n                                return $scope.tree_nodes[index];\n                            };\n\n                            $scope.setScope = function (scope, node) {\n                                var _hash = $scope.getHash(node);\n                                if ($scope.$globals[_hash] !== scope) {\n                                    $scope.$globals[_hash] = scope;\n                                }\n                            };\n\n                            $scope.getScope = function (node) {\n                                if (node) {\n                                    return $scope.$globals[$scope.getHash(node)];\n                                }\n                                return $scope;\n\n                            };\n\n                            $scope.initPlace = function (element, dragElm) {\n\n                                var tagName = null,\n                                    isTable = false;\n\n                                if (element) {\n                                    tagName = element.prop('tagName').toLowerCase();\n                                    isTable = (tagName === 'tr' || tagName === 'td');\n                                } else {\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\n                                }\n\n                                if (!$scope.placeElm) {\n\n                                    if (isTable) {\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                                        var _len_down = $scope.colDefinitions.length;\n                                        $scope.placeElm.append(\n                                            angular.element($window.document.createElement('td'))\n                                                .addClass($scope.$class.empty)\n                                                .addClass('indented')\n                                                .addClass($scope.$class.place)\n                                        );\n                                        while (_len_down-- > 0) {\n                                            $scope.placeElm.append(\n                                                angular.element($window.document.createElement('td'))\n                                                    .addClass($scope.$class.empty)\n                                                    .addClass($scope.$class.place)\n                                            );\n                                        }\n                                    } else {\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                                            .addClass($scope.$class.empty)\n                                            .addClass($scope.$class.place);\n                                    }\n\n                                }\n\n                                if (dragElm) {\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                                }\n\n                                if (element) {\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                                } else {\n                                    $scope.getElementChilds().append($scope.placeElm);\n                                }\n\n                                return $scope.placeElm;\n                            };\n\n                            $scope.hidePlace = function () {\n                                if ($scope.placeElm) {\n                                    $scope.placeElm.addClass($scope.$class.hidden);\n                                }\n                            };\n\n                            $scope.showPlace = function () {\n                                if ($scope.placeElm) {\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\n                                }\n                            };\n\n                            $scope.getScopeTree = function () {\n                                return $scope;\n                            };\n\n                        }\n\n                        $scope.$safeApply = function (fn) {\n                            var phase = this.$root.$$phase;\n                            if (phase === '$apply' || phase === '$digest') {\n                                if (fn && (typeof(fn) === 'function')) {\n                                    fn();\n                                }\n                            } else {\n                                this.$apply(fn);\n                            }\n                        };\n\n                        var getExpandOn = function () {\n                                if ($scope.treeData && $scope.treeData.length) {\n                                    var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\n                                        _len,\n                                        i;\n                                    // Auto get first field with type is string;\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\n                                            $scope.expandingProperty = _keys[i];\n                                            return;\n                                        }\n                                    }\n\n                                    // Auto get first\n                                    if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                                        $scope.expandingProperty = _keys[0];\n                                    }\n\n                                }\n                            },\n                            getColDefs = function () {\n                                // Auto get Defs except attribute __level__ ....\n                                if ($scope.treeData.length) {\n                                    var _col_defs = [], _firstNode = $scope.treeData[0],\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + $scope.expandingProperty + \"$)\"),\n                                        _keys = Object.keys(_firstNode),\n                                        i, _len;\n                                    // Auto get first field with type is string;\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\n                                            _col_defs.push(\n                                                {\n                                                    field: _keys[i]\n                                                }\n                                            );\n                                        }\n                                    }\n                                    $scope.colDefinitions = _col_defs;\n                                }\n                            },\n                            _fnInitFilter,\n                            _fnInitOrderBy,\n                            _fnGetControl,\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\n                                if (!angular.isArray(node.__children__)) {\n                                    node.__children__ = [];\n                                }\n\n                                node.__parent_real__ = parent_real;\n                                node.__parent__ = parent;\n                                _len = node.__children__.length;\n\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                                    node.__expanded__ = level < $scope.expandLevel;\n                                }\n\n                                if (_len === 0) {\n                                    _icon = -1;\n                                } else {\n                                    if (node.__expanded__) {\n                                        _icon = 1;\n                                    } else {\n                                        _icon = 0;\n                                    }\n                                }\n                                // Insert item vertically\n                                _index_real = root.length;\n                                node.__index__ = index;\n                                node.__index_real__ = _index_real;\n                                node.__level__ = level;\n                                node.__icon__ = _icon;\n                                node.__icon_class__ = $scope.$class.icon[_icon];\n                                node.__visible__ = !!visible;\n\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\n                                    node.__uid__ = \"\" + Math.random();\n                                }\n\n                                root.push(node);\n\n                                // Check node children\n                                _dept = 1;\n                                if (_len > 0) {\n                                    for (_i = 0; _i < _len; _i++) {\n                                        _dept += do_f(\n                                            root,\n                                            node.__children__[_i],\n                                            ($scope.primary_key === '__uid__') ? node.__uid__ : node[$scope.primary_key],\n                                            _index_real,\n                                            level + 1,\n                                            visible && node.__expanded__,\n                                            _i\n                                        );\n                                    }\n                                }\n\n                                _hashKey = $scope.getHash(node);\n\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                                    node.__hashKey__ = _hashKey;\n                                    // delete($scope.$globals[_hashKey]);\n                                }\n\n                                node.__dept__ = _dept;\n\n                                return _dept;\n                            },\n                            reload_data = function (oData) {\n                                var _data,\n                                    _len,\n                                    _tree_nodes = [];\n                                if (angular.isDefined(oData)) {\n                                    if (!angular.isArray(oData) || oData.length === 0) {\n                                        return [];\n                                    } else {\n                                        _data = oData;\n                                    }\n                                } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                                    return [];\n                                } else {\n                                    _data = $scope.treeData;\n                                }\n\n                                if (!$attrs.expandOn) {\n                                    getExpandOn();\n                                }\n\n                                if (!$attrs.columnDefs) {\n                                    getColDefs();\n                                }\n\n                                if (angular.isDefined($scope.orderBy)) {\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                                    }\n\n                                    if (angular.isFunction(_fnInitOrderBy)) {\n                                        _data = _fnInitOrderBy(_data, $scope.orderBy);\n                                    }\n                                }\n\n                                if (angular.isDefined($scope.filter)) {\n                                    if (!angular.isFunction(_fnInitFilter)) {\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                                    }\n\n                                    if (angular.isFunction(_fnInitFilter)) {\n                                        _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                                    }\n                                }\n\n                                _len = _data.length;\n                                if (_len > 0) {\n                                    var _i,\n                                        _offset, _max, _min, _keys,\n                                        _deptTotal = 0;\n\n                                    for (_i = 0; _i < _len; _i++) {\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                                    }\n\n                                    // clear Element Empty\n                                    _keys = Object.keys($scope.$globals);\n                                    _len = $scope.$globals.length;\n                                    _offset = _len - _deptTotal;\n\n                                    if (_offset !== 0) {\n                                        _max = _len - _offset;\n                                        _min = _max - Math.abs(_offset);\n                                        for (_i = _min; _i < _max; _i++) {\n                                            delete($scope.$globals[_keys[_i]]);\n                                        }\n                                    }\n                                }\n\n                                // clear memory\n                                if (angular.isDefined($scope.tree_nodes)) {\n                                    delete($scope.tree_nodes);\n                                }\n\n                                $scope.tree_nodes = _tree_nodes;\n                                return _tree_nodes;\n                            },\n                            _defaultFilterOption = {\n                                showParent: true,\n                                showChild:  false,\n                                beginAnd:   true\n                            },\n                            tree,\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\n                                if (angular.isUndefinedOrNull(existAttr)) {\n                                    return false;\n                                }\n\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                                    return true;\n                                }\n\n                                if (angular.isArray(existAttr)) {\n                                    return for_each_attrs(attrs, existAttr, isAnd);\n                                }\n                            },\n                            for_each_attrs = function (attrs, exist, isAnd) {\n                                var i, len = exist.length, passed = false;\n\n                                if (len === 0) {\n                                    return null;\n                                }\n                                for (i = 0; i < len; i++) {\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                                        passed = true;\n                                        if (!isAnd) {\n                                            return true;\n                                        }\n                                    } else {\n                                        if (isAnd) {\n                                            return false;\n                                        }\n                                    }\n                                }\n\n                                return passed;\n                            },\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\n                                nameScope = nameScope || nameAttr;\n                                if (typeof type === 'string' || angular.isArray(type)) {\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\n                                        return;//jmp\n                                    }\n                                    if (typeof $attrs[nameAttr] === 'string') {\n                                        $scope.$watch(\n                                            $attrs[nameAttr], function (val) {\n                                                if ((typeof type === 'string' && typeof val === type) ||\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\n                                                ) {\n                                                    $scope[nameScope] = val;\n                                                } else {\n                                                    if (angular.isFunction(valDefault)) {\n                                                        $scope[nameScope] = valDefault(val);\n                                                    } else {\n                                                        $scope[nameScope] = valDefault;\n                                                    }\n                                                }\n\n                                                if (angular.isFunction(fnAfter)) {\n                                                    fnAfter($scope[nameScope], $scope);\n                                                }\n                                            }, true\n                                        );\n                                    } else {\n\n                                        if (angular.isFunction(fnNotExist)) {\n                                            $scope[nameScope] = fnNotExist();\n                                        } else if (!angular.isUndefined(fnNotExist)) {\n                                            $scope[nameScope] = fnNotExist;\n                                        }\n                                    }\n                                }\n                            },\n                            _watches = [\n                                [\n                                    'enableDrag', [\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\n                                    ['number', 'dragDelay', 0, null, 0],\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                                    [\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                                        if (isHotkey) {\n                                            $scope.enabledMove = false;\n                                        } else {\n                                            $scope.enabledMove = $scope.statusMove;\n                                        }\n                                    }]\n                                ]],\n                                [\n                                    ['enableDrag', 'enableStatus'], [\n                                    [\n                                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\n                                        function (_url) {\n                                            if (_url && $templateCache.get(_url)) {\n                                                $TreeDnDTemplate.setCopy(_url, $scope);\n                                            }\n                                        }],\n                                    [\n                                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\n                                        function (_url) {\n                                            if (_url && $templateCache.get(_url)) {\n                                                $TreeDnDTemplate.setMove(_url, $scope);\n                                            }\n                                        }]\n                                ]],\n                                [\n                                    [['enableDrag', 'enableDrop']], [\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                                ],\n                                [\n                                    '*', [\n                                    ['boolean', 'horizontal'],\n                                    [\n                                        'callback', 'treeClass', function (val) {\n                                        switch (typeof val) {\n                                            case 'string':\n                                                $scope.$tree_class = val;\n                                                break;\n                                            case 'object':\n                                                angular.extend($scope.$class, val);\n                                                $scope.$tree_class = $scope.$class.tree;\n                                                break;\n                                            default:\n                                                $scope.$tree_class = $attrs.treeClass;\n                                                break;\n                                        }\n                                    }, 'treeClass', function () {\n                                        $scope.$tree_class = $scope.$class.tree + ' table';\n                                    }, null, function () {\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + $attrs.treeClass)) {\n                                            $scope.$tree_class = $attrs.treeClass.trim();\n                                            return true;\n                                        }\n                                    }],\n                                    [\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                                        function (expandOn) {\n                                            if (angular.isUndefinedOrNull(expandOn)) {\n                                                $scope.expandingProperty = $attrs.expandOn;\n                                            }\n                                        }],\n                                    [\n                                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                                        'tree', null, function ($tree) {\n\n                                        $scope.reload_data = reload_data;\n\n                                        if (!angular.isFunction(_fnGetControl)) {\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                                        }\n\n                                        if (angular.isFunction(_fnGetControl)) {\n                                            tree = angular.extend(\n                                                $tree,\n                                                _fnGetControl($scope)\n                                            );\n                                        }\n                                    }],\n                                    [\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                                        function (colDefs) {\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                                $scope.colDefinitions = getColDefs();\n                                            }\n                                        }],\n                                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\n                                    [\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                                        var _passed = false;\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                                            var _keysF = Object.keys(filters),\n                                                _lenF = _keysF.length, _iF;\n\n                                            if (_lenF > 0) {\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\n                                                        filters[_keysF[_iF]].length === 0) {\n                                                        continue;\n                                                    }\n                                                    _passed = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n\n                                        $scope.enabledFilter = _passed;\n                                        reload_data();\n                                    }],\n                                    [\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                                        _defaultFilterOption, function (option) {\n                                        if (typeof option === \"object\") {\n                                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                                        }\n                                    }],\n                                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                                    ['number', 'indent', 30, null, 30],\n                                    ['number', 'indentPlus', 20, null, 20],\n                                    [\n                                        'null', 'callbacks',\n                                        function (optCallbacks) {\n                                            angular.forEach(\n                                                optCallbacks, function (value, key) {\n                                                    if (typeof value === \"function\") {\n                                                        if ($scope.$callbacks[key]) {\n                                                            $scope.$callbacks[key] = value;\n                                                        }\n                                                    }\n                                                }\n                                            );\n                                            return $scope.$callbacks;\n                                        },\n                                        '$callbacks'\n                                    ],\n                                    [\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                                        reload_data();\n                                    }],\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                                ]]\n                            ],\n                            w, lenW = _watches.length,\n                            i, len,\n                            _curW,\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\n                        for (w = 0; w < lenW; w++) {\n                            // skip if not exist\n                            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                                continue;\n                            }\n                            _curW = _watches[w][1];\n                            for (i = 0, len = _curW.length; i < len; i++) {\n                                _typeW = _curW[i][0];\n                                _nameW = _curW[i][1];\n                                _defaultW = _curW[i][2];\n                                _scopeW = _curW[i][3];\n                                _NotW = _curW[i][4];\n                                _AfterW = _curW[i][5];\n                                _BeforeW = _curW[i][6];\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n                            }\n                        }\n\n                        if ($attrs.treeData) {\n                            $scope.$watch(\n                                $attrs.treeData, function (val) {\n                                    $scope.treeData = val;\n                                }, true\n                            );\n                        }\n\n                        $scope.$watch(\n                            'treeData', function () {\n                                reload_data();\n                            }, true\n                        );\n                    }],\n                compile:    function compile(tElement) {\n\n                    var $_Template = '',\n                        _element = tElement.html().trim();\n                    if (_element.length > 0) {\n                        $_Template = _element;\n                        tElement.html('');\n                    }\n\n                    return function fnPost(scope, element, attrs) {\n\n                        if (attrs.enableDrag) {\n                            var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                            if (angular.isFunction(_fnInitDrag)) {\n                                _fnInitDrag(scope, element, $window, $document);\n                            }\n                        }\n\n                        // kick out $digest\n                        element.ready(function(){\n                            // apply Template\n                            scope.$safeApply(\n                                function () {\n                                    if ($_Template.length > 0) {\n                                        element.append($compile($_Template)(scope));\n                                    } else {\n                                        $http.get(\n                                            attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                                            {cache: $templateCache}\n                                        ).success(\n                                            function (data) {\n                                                element.append($compile(data.trim())(scope));\n                                                scope.$element = angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                                            }\n                                        );\n                                    }\n\n                                }\n                            );\n                        })\n                    };\n                }\n            };\n        }]\n).factory(\n    '$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey) {\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n                var tree = [],\n                    rootIds = [],\n                    item = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len = data.length,\n                    i = 0;\n                while (i < len) {\n                    item = data[i++];\n                    _primary = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId = item[parentKey];\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent.__children__) {\n                            parent.__children__.push(item);\n                        } else {\n                            parent.__children__ = [item];\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n                return tree;\n            },\n            tree2tree: function access_child(data, parentKey) {\n                var _tree = [],\n                    _i,\n                    _len = data ? data.length : 0,\n                    _copy, _child;\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n                    if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\n                        _child = access_child(_copy[parentKey], parentKey);\n                        delete(_copy[parentKey]);\n                        _copy.__children__ = _child;\n                    }\n                    _tree.push(_copy);\n                }\n                return _tree;\n            }\n        }\n\n        return _$initConvert;\n    }\n).factory(\n    '$TreeDnDHelper', [\n        '$document', '$window', function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node = scope.getData(),\n                        _tree = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    var pos = {};\n                    pos.offsetX = e.pageX - this.offset(target).left;\n                    pos.offsetY = e.pageY - this.offset(target).top;\n                    pos.startX = pos.lastX = e.pageX;\n                    pos.startY = pos.lastY = e.pageY;\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\n                    return pos;\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx = newAx;\n                        pos.moving = true;\n                        return;\n                    }\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr = attr ? attr : 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                }\n            };\n            return _$helper;\n        }]\n).factory(\n    '$TreeDnDPlugin',['$injector', function ($injector) {\n        var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n        return _fnget;\n    }]\n).factory(\n    '$TreeDnDTemplate', [\n        '$templateCache', function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes = {},\n                temp,\n                _$init = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n).factory(\n    '$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            var _iF, _lenF, _keysF,\n                _filter,\n                _state,\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                    if (!angular.isFunction(fnBefore)) {\n                        return null;\n                    }\n\n                    var _i, _len, _nodes,\n                        _nodePassed = fnBefore(options, node),\n                        _childPassed = false;\n\n                    if (angular.isDefined(node[fieldChild])) {\n                        _nodes = node[fieldChild];\n                        _len = _nodes.length;\n                        for (_i = 0; _i < _len; _i++) {\n                            _childPassed = for_all_descendants(\n                                options,\n                                _nodes[_i],\n                                fieldChild,\n                                fnBefore,\n                                fnAfter,\n                                _nodePassed || parentPassed\n                            ) || _childPassed;\n                        }\n                    }\n\n                    if (angular.isFunction(fnAfter)) {\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                    }\n\n                    return _nodePassed || _childPassed;\n                },\n                // Check data by filter\n                _fnCheck = function _fnCheck(callback, check) {\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\n                        return null;\n                    }\n\n                    if (angular.isFunction(callback)) {\n                        return callback(check, $filter);\n                    } else {\n                        if (typeof callback === 'boolean') {\n                            check = !!check;\n                            return check === callback;\n                        } else if (angular.isDefined(callback)) {\n                            try {\n                                var _regex = new RegExp(callback);\n                                return _regex.test(check);\n                            }\n                            catch (err) {\n                                if (typeof check === 'string') {\n                                    return check.indexOf(callback) > -1;\n                                } else {\n                                    return null;\n                                }\n                            }\n                        } else {\n                            return null;\n                        }\n                    }\n                },\n                /**\n                 * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n                 * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n                 *\n                 * @param node\n                 * @param condition\n                 * @param isAnd\n                 * @returns {null|boolean}\n                 * @private\n                 */\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\n                    if (angular.isArray(condition)) {\n                        return for_each_filter(node, condition, isAnd);\n                    } else {\n                        var _key = condition.field,\n                            _callback = condition.callback,\n                            _iO, _keysO, _lenO;\n\n                        if (_key === '_$') {\n                            _keysO = Object.keys(node);\n                            _lenO = _keysO.length;\n                            for (_iO = 0; _iO < _lenO; _iO++) {\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                    return true;\n                                }\n                            }\n                        } else if (angular.isDefined(node[_key])) {\n                            return _fnCheck(_callback, node[_key]);\n                        }\n                    }\n                },\n                /**\n                 *\n                 * @param {object} node\n                 * @param {array} conditions Array `conditions`\n                 * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n                 * @returns {null|boolean}\n                 */\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\n                    var i, len = conditions.length || 0, passed = false;\n                    if (len === 0) {\n                        return null;\n                    }\n\n                    for (i = 0; i < len; i++) {\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\n                            passed = true;\n                            // if condition `or` then return;\n                            if (!isAnd) {\n                                return true;\n                            }\n                        } else {\n\n                            // if condition `and` and result in fnProccess = false then return;\n                            if (isAnd) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return passed;\n                },\n\n                // Will call _fnAfter to clear data no need\n                /**\n                 *\n                 * @param {object} options\n                 * @param {object} node\n                 * @param {boolean} isNodePassed\n                 * @param {boolean} isChildPassed\n                 * @param {boolean} isParentPassed\n                 * @private\n                 */\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                    if (isNodePassed === true) {\n                        node.__filtered__ = true;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    } else if ((isChildPassed === true && options.showParent === true)\n                               || (isParentPassed === true && options.showChild === true)) {\n                        node.__filtered__ = false;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    }\n\n                    // remove attr __filtered__\n                    delete(node.__filtered__);\n                    delete(node.__filtered_visible__);\n                },\n\n                /**\n                 * `fnBefore` will called when `for_all_descendants` of `node` checking.\n                 * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n                 *\n                 * @param {object} options\n                 * @param {object} node\n                 * @returns {null|boolean}\n                 * @private\n                 */\n                _fnBefore = function _fnBefore(options, node) {\n                    if (options.filter.length === 0) {\n                        return true;\n                    } else {\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\n                    }\n                },\n\n                /**\n                 * `_fnConvert` to convert `filter` `object` to `array` invaild.\n                 *\n                 * @param {object|array} filters\n                 * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n                 * @private\n                 */\n                _fnConvert = function _fnConvert(filters) {\n                    // convert filter object to array filter\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\n                        _keysF = Object.keys(filters);\n                        _lenF = _keysF.length;\n                        _filter = [];\n\n                        if (_lenF > 0) {\n                            for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\n                                    continue;\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                    _state = filters[_keysF[_iF]];\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\n                                } else {\n                                    _state = {\n                                        field:    _keysF[_iF],\n                                        callback: filters[_keysF[_iF]]\n                                    };\n                                }\n                                _filter.push(_state);\n                            }\n                        }\n                        _state = null;\n                        return _filter;\n                    }\n                    else {\n                        return filters;\n                    }\n                },\n\n                /**\n                 * `_fnMain` function is constructor of service `$TreeDnDFilter`.\n                 * @constructor\n                 * @param {object|array} treeData\n                 * @param {object|array} filters\n                 * @param {object} options\n                 * @returns {array} Return `treeData` or `treeData` with `filter`\n                 * @private\n                 */\n                _fnMain = function _fnMain(treeData, filters, options) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(filters) || angular.isObject(filters))\n                        || filters.length === 0) {\n                        return treeData;\n                    }\n\n                    var _i, _len,\n                        _filter;\n\n                    _filter = _fnConvert(filters);\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                        || _filter.length === 0) {\n                        return treeData;\n                    }\n                    options.filter = _filter;\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            '__children__',\n                            _fnBefore, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                };\n\n            return _fnMain;\n        }]\n).factory(\n    '$TreeDnDOrderBy', [\n        '$filter', function ($filter) {\n            var _fnOrderBy = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\n                        return treeData;\n                    }\n\n                    var _i, _len,\n                        _iF, _lenF, _keysF;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    treeData = _fnOrder(treeData, orderBy);\n                    return treeData;\n                };\n\n            return _fnMain;\n        }]\n).factory(\n    '$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            var _offset,\n                _fnPlaceHolder = function (e, $params) {\n                    if ($params.placeElm) {\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                        ) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n                _fnDragStart = function (e, $params) {\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                        // disable right click\n                        return;\n                    }\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\n                        return;\n                    }\n                    // the element which is clicked.\n                    var eventElm = angular.element(e.target),\n                        eventScope = eventElm.scope();\n                    if (!eventScope || !eventScope.$type) {\n                        return;\n                    }\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                    //     return;\n                    // }\n\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                        return;\n                    }\n\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                        dragScope,\n                        _$scope = $params.$scope;\n                    if (eventElmTagName === 'input'\n                        || eventElmTagName === 'textarea'\n                        || eventElmTagName === 'button'\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                        return;\n                    }\n                    // check if it or it's parents has a 'data-nodrag' attribute\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                            return;\n                        }\n                        eventElm = eventElm.parent();\n                    }\n\n                    e.uiTreeDragging = true; // stop event bubbling\n                    if (e.originalEvent) {\n                        e.originalEvent.uiTreeDragging = true;\n                    }\n                    e.preventDefault();\n\n                    dragScope = eventScope.getScopeNode();\n\n                    $params.firstMoving = true;\n\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\n                        return;\n                    }\n\n                    var eventObj = $TreeDnDHelper.eventObj(e),\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\n                        isTable = (tagName === 'tr');\n\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                    _$scope.setDragging($params.dragInfo);\n\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                    if (isTable) {\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                            .addClass(_$scope.$class.tree)\n                            .addClass(_$scope.$class.drag)\n                            .addClass(_$scope.$tree_class);\n                    } else {\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                            .addClass(_$scope.$class.drag)\n                            .addClass('tree-dnd-nodes')\n                            .addClass(_$scope.$tree_class);\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                            'z-index': 9995\n                        }\n                    );\n\n                    $params.offsetEdge = 0;\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\n                        _scope = dragScope,\n                        _element = _scope.$element,\n                        _clone = null,\n                        _needCollapse = !!_$scope.enabledCollapse,\n                        _copied = false,\n                        _tbody = null;\n\n                    if (isTable) {\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\n\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node) {\n                                _scope = _$scope.getScope(_node);\n                                _element = _scope.$element;\n\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _tbody.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n                                }\n\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        );\n\n                        $params.dragElm.append(_tbody);\n                    } else {\n\n                        if (!_needCollapse) {\n                            _clone = _element.clone();\n                        } else {\n                            var _holder = _scope.getElementChilds(),\n                                _swaper = angular.element(\"<swaped />\");\n\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\n                            _holder.after(angular.element(\"<holder />\"));\n                            _swaper.append(_holder);\n\n                            // Clone without Children & remove tag `<holder>`\n                            _clone = _element.clone();\n                            _clone.find(\"holder\").remove();\n\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\n                            _element.find(\"holder\").replaceWith(_holder);\n\n                            // Reset & clear all;\n                            _swaper.remove();\n                            _holder = null;\n                        }\n\n                        $params.dragElm.append(_clone);\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\n                            _element.addClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            )       + 'px',\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                        }\n                    );\n                    // moving item with descendant\n                    $params.$document.find('body').append($params.dragElm);\n                    if (_$scope.$callbacks.droppable()) {\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                        if (isTable) {\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                        }\n\n                        $params.placeElm.css('width', _width);\n                    }\n\n                    _$scope.showPlace();\n                    _$scope.targeting = true;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                    $params.document_height = Math.max(\n                        $params.body.scrollHeight,\n                        $params.body.offsetHeight,\n                        $params.html.clientHeight,\n                        $params.html.scrollHeight,\n                        $params.html.offsetHeight\n                    );\n\n                    $params.document_width = Math.max(\n                        $params.body.scrollWidth,\n                        $params.body.offsetWidth,\n                        $params.html.clientWidth,\n                        $params.html.scrollWidth,\n                        $params.html.offsetWidth\n                    );\n                },\n                _fnDragMove = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (!$params.dragStarted) {\n                        if (!$params.dragDelaying) {\n                            $params.dragStarted = true;\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\n                                }\n                            );\n                        }\n                        return;\n                    }\n\n                    if ($params.dragElm) {\n                        e.preventDefault();\n                        if ($params.$window.getSelection) {\n                            $params.$window.getSelection().removeAllRanges();\n                        } else if ($params.$window.document.selection) {\n                            $params.$window.document.selection.empty();\n                        }\n\n                        var eventObj = $TreeDnDHelper.eventObj(e),\n                            leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                            topElmPos = eventObj.pageY - $params.pos.offsetY;\n\n                        //dragElm can't leave the screen on the left\n                        if (leftElmPos < 0) {\n                            leftElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the top\n                        if (topElmPos < 0) {\n                            topElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the bottom\n                        if ((topElmPos + 10) > $params.document_height) {\n                            topElmPos = $params.document_height - 10;\n                        }\n\n                        //dragElm can't leave the screen on the right\n                        if ((leftElmPos + 10) > $params.document_width) {\n                            leftElmPos = $params.document_width - 10;\n                        }\n\n                        $params.dragElm.css(\n                            {\n                                'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                    $params.offsetEdge + 1,\n                                    true,\n                                    true\n                                )       + 'px',\n                                'top':  topElmPos + 'px'\n                            }\n                        );\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.setPositionStatus(e);\n                        }\n\n                        var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                            bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                        // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                        if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                            window.scrollBy(0, 10);\n                        }\n                        // to scroll top if cursor y-position is less than the top position the vertical scroll\n                        if (top_scroll > eventObj.pageY) {\n                            window.scrollBy(0, -10);\n                        }\n\n                        $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                        if ($params.firstMoving) {\n                            $params.firstMoving = false;\n                            return;\n                        }\n                        // check if add it as a child node first\n\n                        var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                            targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                            targetElm,\n                            targetScope,\n                            targetBefore,\n                            targetOffset,\n                            tagName,\n                            isTable,\n                            isChanged = true,\n                            isVeritcal = true,\n                            isEmpty,\n                            isSwapped,\n                            _scope,\n                            _target,\n                            _parent,\n                            _info = $params.dragInfo,\n                            _move = _info.move,\n                            _drag = _info.node,\n                            _drop = _info.drop,\n                            treeScope = _info.target,\n                            fnSwapTree,\n                            isHolder = _fnPlaceHolder(e, $params);\n\n                        if (!isHolder) {\n                            /* when using elementFromPoint() inside an iframe, you have to call\n                             elementFromPoint() twice to make sure IE8 returns the correct value\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                            targetElm = angular.element(\n                                $params.$window.document.elementFromPoint(\n                                    targetX,\n                                    targetY\n                                )\n                            );\n\n                            targetScope = targetElm.scope();\n                            if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                                // Not allowed Drop Item\n                                return;\n                            }\n\n                            fnSwapTree = function () {\n                                treeScope = targetScope.getScopeTree();\n                                _target = _info.target;\n\n                                if (_info.target !== treeScope) {\n                                    // Replace by place-holder new\n                                    _target.hidePlace();\n                                    _target.targeting = false;\n                                    treeScope.targeting = true;\n\n                                    _info.target = treeScope;\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                    _target = null;\n                                    isSwapped = true;\n                                }\n                                return true;\n                            };\n\n                            if (angular.isFunction(targetScope.getScopeNode)) {\n                                targetScope = targetScope.getScopeNode();\n                                if (!fnSwapTree()) {\n                                    return;\n                                }\n                            } else {\n                                if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                    if (targetScope.tree_nodes) {\n                                        if (targetScope.tree_nodes.length === 0) {\n                                            if (!fnSwapTree()) {\n                                                return;\n                                            }\n                                            // Empty\n                                            isEmpty = true;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            }\n                        }\n\n                        if ($params.pos.dirAx && !isSwapped || isHolder) {\n                            isVeritcal = false;\n                            targetScope = _info.scope;\n                        }\n\n                        if (!targetScope.$element && !targetScope) {\n                            return;\n                        }\n\n                        tagName = targetScope.$element.prop('tagName').toLowerCase();\n                        isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\n                        if (isEmpty) {\n                            _move.parent = null;\n                            _move.pos = 0;\n\n                            _drop = null;\n                        } else {\n                            // move vertical\n                            if (isVeritcal) {\n                                targetElm = targetScope.$element; // Get the element of tree-dnd-node\n\n                                targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                                if (targetScope.horizontal && !isTable) {\n                                    targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\n                                } else {\n                                    if (isTable) {\n                                        targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\n                                    } else {\n                                        var _height = $TreeDnDHelper.height(targetElm);\n\n                                        if (targetScope.getElementChilds()) {\n                                            _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                        }\n\n                                        if (eventObj.pageY > targetOffset.top + _height) {\n                                            return;\n                                        }\n\n                                        targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\n                                    }\n                                }\n\n                                if (!angular.isFunction(targetScope.getData)) {\n                                    return;\n                                }\n\n                                _target = targetScope.getData();\n                                _parent = targetScope.getNode(_target.__parent_real__);\n\n                                if (targetBefore) {\n                                    var _prev = targetScope.getPrevSibling(_target);\n\n                                    _move.parent = _parent;\n                                    _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                    _drop = _prev;\n                                } else {\n                                    if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                        _move.parent = _target;\n                                        _move.pos = 0;\n\n                                        _drop = null;\n                                    } else {\n                                        _move.parent = _parent;\n                                        _move.pos = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    }\n                                }\n                            } else {\n                                // move horizontal\n                                if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                    $params.pos.distAxX = 0;\n                                    // increase horizontal level if previous sibling exists and is not collapsed\n                                    if ($params.pos.distX > 0) {\n                                        _parent = _drop;\n                                        if (!_parent) {\n                                            if (_move.pos - 1 >= 0) {\n                                                _parent = _move.parent.__children__[_move.pos - 1];\n                                            } else {\n                                                return;\n                                            }\n                                        }\n\n                                        if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                            _parent = treeScope.getPrevSibling(_parent);\n                                        }\n\n                                        if (_parent && _parent.__visible__) {\n                                            var _len = _parent.__children__.length;\n\n                                            _move.parent = _parent;\n                                            _move.pos = _len;\n\n                                            if (_len > 0) {\n                                                _drop = _parent.__children__[_len - 1];\n                                            } else {\n                                                _drop = null;\n                                            }\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else if ($params.pos.distX < 0) {\n                                        _target = _move.parent;\n                                        if (_target &&\n                                            (_target.__children__.length === 0 ||\n                                             _target.__children__.length - 1 < _move.pos ||\n                                             (_info.drag === _info.target &&\n                                              _target.__index_real__ === _drag.__parent_real__ &&\n                                              _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\n                                        ) {\n                                            _parent = treeScope.getNode(_target.__parent_real__);\n\n                                            _move.parent = _parent;\n                                            _move.pos = _target.__index__ + 1;\n\n                                            _drop = _target;\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    // limited\n                                    return;\n                                }\n                            }\n                        }\n\n                        if (_info.drag === _info.target &&\n                            _move.parent &&\n                            _drag.__parent_real__ === _move.parent.__index_real__ &&\n                            _drag.__index__ === _move.pos\n                        ) {\n                            isChanged = false;\n                        }\n\n                        if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                            _info.move = _move;\n                            _info.drop = _drop;\n                            _info.changed = isChanged;\n                            _info.scope = targetScope;\n\n                            if (isTable) {\n                                $TreeDnDHelper.replaceIndent(\n                                    treeScope,\n                                    $params.placeElm,\n                                    angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                                );\n\n                                if (_drop) {\n                                    _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\n\n                                    if (_drop.__index__ < _parent.length - 1) {\n                                        // Find fast\n                                        _drop = _parent[_drop.__index__ + 1];\n                                        _scope = _info.target.getScope(_drop);\n                                        _scope.$element[0].parentNode.insertBefore(\n                                            $params.placeElm[0],\n                                            _scope.$element[0]\n                                        );\n                                    } else {\n                                        _target = _info.target.getLastDescendant(_drop);\n                                        _scope = _info.target.getScope(_target);\n                                        _scope.$element.after($params.placeElm);\n                                    }\n                                } else {\n                                    _scope = _info.target.getScope(_move.parent);\n                                    if (_scope) {\n                                        if (_move.parent) {\n                                            _scope.$element.after($params.placeElm);\n\n                                        } else {\n                                            _scope.getElementChilds().prepend($params.placeElm);\n                                        }\n                                    }\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_drop || _move.parent);\n\n                                if (_drop) {\n                                    _scope.$element.after($params.placeElm);\n                                } else {\n                                    _scope.getElementChilds().prepend($params.placeElm);\n                                }\n                            }\n\n                            treeScope.showPlace();\n\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragMove(_info);\n                                }\n                            );\n                        }\n\n                    }\n                },\n                _fnDragEnd = function (e, $params) {\n                    e.preventDefault();\n                    if ($params.dragElm) {\n                        var _passed = false,\n                            _$scope = $params.$scope,\n                            _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _isTable = (tagName === 'tr'),\n                            _element = _scope.$element;\n\n                        _$scope.$safeApply(\n                            function () {\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                            }\n                        );\n\n                        // rollback all\n                        if (_isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n\n                        $params.dragElm.remove();\n                        $params.dragElm = null;\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        var _status = false;\n                        if (_$scope.$$apply) {\n                            _$scope.$safeApply(\n                                function () {\n                                    _status = _$scope.$callbacks.dropped(\n                                        $params.dragInfo,\n                                        _passed,\n                                        _$scope.enabledMove\n                                    );\n                                }\n                            );\n                        } else {\n                            _fnBindDrag($params);\n                        }\n\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            }\n                        );\n\n                        $params.dragInfo.target.hidePlace();\n                        $params.dragInfo.target.targeting = false;\n\n                        $params.dragInfo = null;\n                        _$scope.$$apply = false;\n                        _$scope.setDragging(null);\n                    }\n\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n                },\n                _fnDragStartEvent = function (e, $params) {\n                    if ($params.$scope.$callbacks.draggable()) {\n                        _fnDragStart(e, $params);\n                    }\n                },\n                _fnBindDrag = function ($params) {\n                    $params.element.bind(\n                        'touchstart mousedown', function (e) {\n                            $params.dragDelaying = true;\n                            $params.dragStarted = false;\n                            _fnDragStartEvent(e, $params);\n                            $params.dragTimer = $timeout(\n                                function () {\n                                    $params.dragDelaying = false;\n                                }, $params.$scope.dragDelay\n                            );\n                        }\n                    );\n                    $params.element.bind(\n                        'touchend touchcancel mouseup', function () {\n                            $timeout.cancel($params.dragTimer);\n                        }\n                    );\n                },\n                _fnKeydownHandler = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (e.keyCode === 27) {\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        _$scope.$$apply = false;\n                        _fnDragEnd(e, $params);\n                    } else {\n                        if (_$scope.enabledHotkey && e.shiftKey) {\n                            _$scope.enableMove(true);\n                            if (_$scope.enabledStatus) {\n                                _$scope.refreshStatus();\n                            }\n\n                            if (!$params.dragInfo) {\n                                return;\n                            }\n\n                            var _scope = _$scope.getScope($params.dragInfo.node),\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\n                                _element = _scope.$element;\n\n                            if (tagName === 'tr') {\n                                _$scope.for_all_descendants(\n                                    $params.dragInfo.node, function (_node) {\n                                        _scope = _$scope.getScope(_node);\n                                        _element = _scope.$element;\n\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                );\n                            } else {\n                                if (_$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        }\n                    }\n                },\n                _fnKeyupHandler = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\n                        _$scope.enableMove(false);\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _element = _scope.$element;\n\n                        if (tagName === 'tr') {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                },\n\n                _$init = function (scope, element, $window, $document) {\n                    var $params = {\n                            hasTouch:        ('ontouchstart' in window),\n                            firstMoving:     null,\n                            dragInfo:        null,\n                            pos:             null,\n                            placeElm:        null,\n                            dragElm:         null,\n                            dragDelaying:    true,\n                            dragStarted:     false,\n                            dragTimer:       null,\n                            body:            document.body,\n                            html:            document.documentElement,\n                            document_height: null,\n                            document_width:  null,\n                            offsetEdge:      null,\n                            $scope:          scope,\n                            $window:         $window,\n                            $document:       $document,\n                            element:         element,\n                            bindDrag:        function () {\n                                _fnBindDrag($params);\n                            },\n                            dragEnd:         function (e) {\n                                _fnDragEnd(e, $params);\n                            },\n                            dragMoveEvent:   function (e) {\n                                _fnDragMove(e, $params)\n                            },\n                            dragEndEvent:    function (e) {\n                                scope.$$apply = true;\n                                _fnDragEnd(e, $params);\n                            },\n                            dragCancelEvent: function (e) {\n                                _fnDragEnd(e, $params);\n                            }\n                        },\n                        keydownHandler = function (e) {\n                            return _fnKeydownHandler(e, $params);\n                        },\n                        keyupHandler = function (e) {\n                            return _fnKeyupHandler(e, $params);\n                        };\n\n                    scope.dragEnd = function (e) {\n                        $params.dragEnd(e);\n                    };\n\n                    $params.bindDrag();\n\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\n                    //unbind handler that retains scope\n                    scope.$on(\n                        '$destroy', function () {\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\n                            if (scope.statusElm) {\n                                scope.statusElm.remove();\n                            }\n\n                            if (scope.placeElm) {\n                                scope.placeElm.remove();\n                            }\n                        }\n                    );\n                };\n\n            return _$init;\n        }\n    ]\n).factory(\n    '$TreeDnDControl', function () {\n        var _target, _parent,\n            i, len,\n            fnSetCollapse = function fnSetCollapse(node) {\n                node.__expanded__ = false;\n            },\n            fnSetExpand = function fnSetExpand(node) {\n                node.__expanded__ = true;\n            },\n\n            _$init = function _$init(scope) {\n                var n, tree = {\n                    selected_node:                     null,\n                    for_all_descendants:               scope.for_all_descendants,\n                    select_node:                       function (node) {\n                        if (!node) {\n                            if (tree.selected_node) {\n                                delete(tree.selected_node.__selected__);\n                            }\n                            tree.selected_node = null;\n                            return null;\n                        }\n\n                        if (node !== tree.selected_node) {\n                            if (tree.selected_node) {\n                                delete(tree.selected_node.__selected__);\n                            }\n                            node.__selected__ = true;\n                            tree.selected_node = node;\n                            tree.expand_all_parents(node);\n                            if (angular.isFunction(tree.on_select)) {\n                                tree.on_select(node);\n                            }\n                        }\n                        return node;\n                    },\n                    deselect_node:                     function () {\n                        _target = null;\n                        if (tree.selected_node) {\n                            delete(tree.selected_node.__selected__);\n                            _target = tree.selected_node;\n                            tree.selected_node = null;\n                        }\n                        return _target;\n                    },\n                    get_parent:                        function (node) {\n                        if (node && node.__parent_real__ !== null) {\n                            return scope.tree_nodes[node.__parent_real__];\n                        }\n                        return null;\n                    },\n                    for_all_ancestors:                 function (child, fn) {\n                        _parent = tree.get_parent(child);\n                        if (_parent) {\n                            if (fn(_parent)) {\n                                return false;\n                            }\n\n                            return tree.for_all_ancestors(_parent, fn);\n                        }\n                        return true;\n                    },\n                    expand_all_parents:                function (child) {\n                        return tree.for_all_ancestors(\n                            child, fnSetExpand\n                        );\n                    },\n                    reload_data:                       function () {\n                        return scope.reload_data();\n                    },\n                    add_node:                          function (parent, new_node, index) {\n                        if (typeof index !== 'number') {\n                            if (parent) {\n                                parent.__children__.push(new_node);\n                                parent.__expanded__ = true;\n                            } else {\n                                scope.treeData.push(new_node);\n                            }\n                        } else {\n                            if (parent) {\n                                parent.__children__.splice(index, 0, new_node);\n                                parent.__expanded__ = true;\n                            } else {\n                                scope.treeData.splice(index, 0, new_node);\n                            }\n                        }\n                        return new_node;\n                    },\n                    add_node_root:                     function (new_node) {\n                        tree.add_node(null, new_node);\n                        return new_node;\n                    },\n                    expand_all:                        function () {\n                        len = scope.treeData.length;\n                        for (i = 0; i < len; i++) {\n                            tree.for_all_descendants(\n                                scope.treeData[i], fnSetExpand\n                            );\n                        }\n                    },\n                    collapse_all:                      function () {\n                        len = scope.treeData.length;\n                        for (i = 0; i < len; i++) {\n                            tree.for_all_descendants(\n                                scope.treeData[i], fnSetCollapse\n                            );\n                        }\n                    },\n                    remove_node:                       function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            if (node.__parent_real__) {\n                                _parent = tree.get_parent(node).__children__;\n                            } else {\n                                _parent = scope.treeData;\n                                var clearme = true;\n                            }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//BUG FIX, tree_nodes does not clear when last element\n\t                        //is removed\n    \t                    if (clearme){\n        \t                    if (node.__index__ === 0){\n            \t                    scope.tree_nodes = [];\n                \t            }\n                    \t    }\n\n                            _parent.splice(node.__index__, 1);\n\n                            if (tree.selected_node === node) {\n                                tree.selected_node = null;\n                            }\n                        }\n                    },\n                    expand_node:                       function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            node.__expanded__ = true;\n                            return node;\n                        }\n                    },\n                    collapse_node:                     function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            node.__expanded__ = false;\n                            return node;\n                        }\n                    },\n                    get_selected_node:                 function () {\n                        return tree.selected_node;\n                    },\n                    get_first_node:                    function () {\n                        len = scope.treeData.length;\n                        if (len > 0) {\n                            return scope.treeData[0];\n                        }\n                        return null;\n                    },\n                    get_children:                      function (node) {\n                        return node.__children__;\n                    },\n                    get_siblings:                      function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _parent = tree.get_parent(node);\n                            if (_parent) {\n                                _target = _parent.__children__;\n                            } else {\n                                _target = scope.treeData;\n                            }\n                            return _target;\n                        }\n                    },\n                    get_next_sibling:                  function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _target = tree.get_siblings(node);\n                            n = _target.length;\n                            if (node.__index__ < n) {\n                                return _target[node.__index__ + 1];\n                            }\n                        }\n                    },\n                    get_prev_sibling:                  function (node) {\n                        node = node || tree.selected_node;\n                        _target = tree.get_siblings(node);\n                        if (node.__index__ > 0) {\n                            return _target[node.__index__ - 1];\n                        }\n                    },\n                    get_first_child:                   function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _target = node.__children__;\n                            if (_target && _target.length > 0) {\n                                return node.__children__[0];\n                            }\n                        }\n                        return null;\n                    },\n                    get_closest_ancestor_next_sibling: function (node) {\n                        node = node || tree.selected_node;\n                        _target = tree.get_next_sibling(node);\n                        if (_target) {\n                            return _target;\n                        }\n\n                        _parent = tree.get_parent(node);\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    },\n                    get_next_node:                     function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_first_child(node);\n                            if (_target) {\n                                return _target;\n                            } else {\n                                return tree.get_closest_ancestor_next_sibling(node);\n                            }\n                        }\n                    },\n                    get_prev_node:                     function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_sibling(node);\n                            if (_target) {\n                                return tree.get_last_descendant(_target);\n                            }\n\n                            _parent = tree.get_parent(node);\n                            return _parent;\n                        }\n                    },\n                    get_last_descendant:               scope.getLastDescendant,\n                    select_parent_node:                function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _parent = tree.get_parent(node);\n                            if (_parent) {\n                                return tree.select_node(_parent);\n                            }\n                        }\n                    },\n                    select_first_node:                 function () {\n                        return tree.select_node(tree.get_first_node());\n                    },\n                    select_next_sibling:               function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_next_sibling(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_prev_sibling:               function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_sibling(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_next_node:                  function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_next_node(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_prev_node:                  function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_node(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    }\n                };\n                angular.extend(scope.tree, tree);\n                return scope.tree;\n            };\n\n        return _$init;\n    }\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    [\n        '$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            [\"<table ng-class=\\\"$tree_class\\\">\",\n             \"    <thead>\",\n             \"  <tr>\",\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\n             \"        <\\/th>\",\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\n             \"         {{col.displayName || col.field}}\",\n             \"     </th>\",\n             \"    </tr>\",\n             \"    </thead>\",\n             \" <tbody tree-dnd-nodes>\",\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in tree_nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\n             \"        <td tree-dnd-node-handle\",\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\n             \"              <a data-nodrag>\",\n             \"                  <i ng-class=\\\"node.__icon_class__\\\" ng-click=\\\"toggleExpand(node)\\\"\",\n             \"                     class=\\\"tree-icon\\\"></i>\",\n             \"              </a>\",\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\n             \"       </td>\",\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\n             \"            compile=\\\"col.cellTemplate\\\">\",\n             \"            {{node[col.field]}}\",\n             \"       </td>\",\n             \"    </tr>\",\n             \"    </tbody>\",\n             \"</table>\"].join('')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n}).call(window);"],"sourceRoot":"/source/"}